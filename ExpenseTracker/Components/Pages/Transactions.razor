@page "/transactions"
@using ExpenseTracker.Models
@using ExpenseTracker.Services
@inject AuthenticationStateService authStateService
@inject NavigationManager navigationManager
@inject ITransactionService transactionService


@if (authStateService.IsAuthenticated())
{

    <div class="d-flex justify-content-between">
        <h2>Your Transactions</h2>
        <!-- Add Transaction Button -->
        <button class="btn btn-primary" @onclick="OpenModal">Add Transaction</button>
    </div>

    <!-- Filters and Search Bar -->
    <div class="my-3">
        <button class="btn-tab @(activeFilter == "All" ? "active" : "")" @onclick="ClearFilters">All</button>
        <button class="btn-tab @(activeFilter == "Income" ? "active" : "")" @onclick="FilterIncome">Income</button>
        <button class="btn-tab @(activeFilter == "Expense" ? "active" : "")" @onclick="FilterExpense">Expense</button>
        <button class="btn-tab @(activeFilter == "Debt" ? "active" : "")" @onclick="FilterDebt">Debt</button>

        <div class="d-flex gap-2 mt-1">

            <input type="text" class="form-control" placeholder="Search by Title or Tag" @bind="searchTerm" />

            <div class="d-flex gap-2 align-items-center">
                <div class="d-flex gap-2">
                    <label>From:</label>
                    <input type="date" class="form-control" @bind="fromDate"  />
                </div>
                <div class="d-flex gap-2 align-items-center">
                    <label>To:</label>
                    <input type="date" class="form-control" @bind="toDate" />
                </div>
            </div>
            <button class="btn btn-primary" @onclick="FilterTransaction">Search</button>
        </div>
    </div>



    <!-- Transaction List -->
    <div class="transaction-list">
        <table class="table">
            <thead>
                <tr>
                    <th>SNO</th>
                    <th>Title</th>
                    <th>Amount</th>
                    <th>Date
                        <button class="btn btn-secondary" @onclick="ToggleSortOrder">
                            Sort by Date (@currentSortOrder)
                        </button>

                    </th>
                    <th>Type</th>
                    <th>Tag</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var transaction in filteredTransactions)
                {
                    <tr>
                        <td>@transaction.Sno</td>
                        <td>@transaction.Description</td>
                        <td>@transaction.Amount.ToString("C")</td>
                        <td>@transaction.Date.ToString("yyyy-MM-dd")</td>
                        <td class="@(transaction.Type == "Income" ? "text-success" : transaction.Type == "Expense" ? "text-danger" : "text-warning")">
                            @transaction.Type
                        </td>
                        <td>@transaction.Tag</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Modal for Adding Transaction -->
    @if (showModal)
    {
        <div class="modal fade show d-block" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Add Transaction</h5>
                        <button type="button" class="btn-close" @onclick="CloseModal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label>Title</label>
                            <input type="text" class="form-control" @bind="newTransaction.Description" />
                        </div>
                        <div class="mb-3">
                            <label>Amount</label>
                            <input type="number" class="form-control" @bind="newTransaction.Amount" />
                        </div>
                        <div class="mb-3">
                            <label>Transaction Type</label>
                            <select class="form-control" @bind="newTransaction.Type">
                                <option value=""></option>
                                <option value="Income">Income</option>
                                <option value="Expense">Expense</option>
                                <option value="Debt">Debt</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label>Tag</label>
                            <select class="form-control" @bind="newTransaction.Tag">
                                <option value=""></option>
                                <option value="Salary">Salary</option>
                                <option value="Other">Other</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label>Date</label>
                            <input type="date" class="form-control" @bind="newTransaction.Date" />
                        </div>
                        <div class="mb-3">
                            <label>Note (Optional)</label>
                            <textarea class="form-control" @bind="newTransaction.Note"></textarea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                        <button type="button" class="btn btn-primary" @onclick="AddTransaction">Add</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
}

@code {
    private string searchTerm;
    private string activeFilter = "All";
    private Transaction newTransaction = new Transaction();
    private bool showModal = false;
    private DateTime? fromDate;
    private DateTime? toDate;
    private List<Transaction> transactions = new List<Transaction>();
    private List<Transaction> filteredTransactions = new List<Transaction>();
    private string currentSortOrder = "Ascending";

    protected override async Task OnInitializedAsync()
    {
        transactions = await transactionService.GetTransactionsAsync();
        filteredTransactions = transactions;
    }

    private void FilterTransactions(string type)
    {
        if (type == "All")
        {
            filteredTransactions = transactions;
        }
        else
        {
            filteredTransactions = transactions
                .Where(t => t.Type.Equals(type)).ToList();
        }
    }

    private void HandleDateFilter()
    {
        filteredTransactions = transactions.Where(t =>
            (!fromDate.HasValue || t.Date >= fromDate) &&
            (!toDate.HasValue || t.Date <= toDate)).ToList();
    }

    private void FilterIncome()
    {
        FilterTransactions("Income");
    }

    private void FilterExpense()
    {
        FilterTransactions("Expense");
    }

    private void FilterDebt()
    {
        FilterTransactions("Debt");
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            filteredTransactions = transactions.Where(t =>
                t.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                t.Tag.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }


    private void OpenModal()
    {
        newTransaction = new Transaction();
        newTransaction.Date = DateTime.Now;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private async Task AddTransaction()
    {
        if (!string.IsNullOrWhiteSpace(newTransaction.Description) && newTransaction.Amount > 0)
        {
            await transactionService.AddTransactionAsync(newTransaction);
            transactions = await transactionService.GetTransactionsAsync();
            filteredTransactions = transactions;
        }
        CloseModal();
    }


    private void ClearFilters()
    {
        activeFilter = "All";
        filteredTransactions = transactions;
    }

    private void ToggleSortOrder()
    {
        // Toggle the sort order
        currentSortOrder = currentSortOrder == "Ascending" ? "Descending" : "Ascending";
        SortTransactions();
    }

    private void SortTransactions()
    {
        // Apply sorting based on the current order
        if (currentSortOrder == "Ascending")
        {
            filteredTransactions = filteredTransactions.OrderBy(t => t.Date).ToList();
        }
        else
        {
            filteredTransactions = filteredTransactions.OrderByDescending(t => t.Date).ToList();
        }
    }
    private void FilterTransaction()
    {
        filteredTransactions = transactions.Where(t =>
            // Check search term
            (string.IsNullOrWhiteSpace(searchTerm) ||
             t.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
             t.Tag.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&

            // Check date range
            (!fromDate.HasValue || t.Date >= fromDate.Value) &&
            (!toDate.HasValue || t.Date <= toDate.Value)
        ).ToList();

    }
}


