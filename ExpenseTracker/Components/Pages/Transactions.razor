@page "/transactions"
@using ExpenseTracker.Models
@using ExpenseTracker.Services
@inject AuthenticationStateService authStateService
@inject NavigationManager navigationManager
@inject ITransactionService transactionService
@inject ITagService tagService


@if (authStateService.IsAuthenticated())
{

    <div class="d-flex justify-content-between">
        <h2>Transactions</h2>
        <!-- Add Transaction Button -->
        <MudButton Variant="Variant.Filled"
                   StartIcon="@Icons.Material.Filled.Add"
                   IconColor="Color.Secondary"
                   Size="Size.Large"
                   @onclick="OpenModal"
                   Style="background-color: #001B2E; color: white; border-radius:10px;">
            Add Transaction
        </MudButton>

    </div>

    <!-- Filters and Search Bar -->
    <div class="my-3">
        <button class="btn-tab @(activeFilter == "All" ? "active" : "")" @onclick="ClearFilters">All</button>
        <button class="btn-tab @(activeFilter == "Income" ? "active" : "")" @onclick="FilterIncome">Income</button>
        <button class="btn-tab @(activeFilter == "Expense" ? "active" : "")" @onclick="FilterExpense">Expense</button>
        <button class="btn-tab @(activeFilter == "Debt" ? "active" : "")" @onclick="FilterDebt">Debt</button>

        <div class="d-flex gap-2 mt-5">

            <input type="text" class="form-control" placeholder="Search by Title or Tag" @bind="searchTerm" />

            <div class="d-flex gap-2 align-items-center">
                <div class="d-flex gap-2">
                    <label>From:</label>
                    <input type="date" class="form-control" @bind="fromDate"  />
                </div>
                <div class="d-flex gap-2 align-items-center">
                    <label>To:</label>
                    <input type="date" class="form-control" @bind="toDate" />
                </div>
            </div>

            <MudButton Variant="Variant.Filled"
                       Size="Size.Large"
                       @onclick="FilterTransaction"
                       Style="background-color: #001B2E; color: white; border-radius:10px;">
                Search
            </MudButton>
        </div>
    </div>



    <!-- Transaction List -->
    <div class="transaction-list">
        <table class="table">
            <thead>
                <tr>
                    <th>SNO</th>
                    <th>Title</th>
                    <th>Amount</th>
                    <th>Date
                        <button class="btn btn-secondary" @onclick="ToggleSortOrder">
                            Sort by Date (@currentSortOrder)
                        </button>

                    </th>
                    <th>Type</th>
                    <th>Tag</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var (transaction,index) in filteredTransactions.Select((t,i)=>(t,i+1)))
                {
                    <tr>
                        <td>@index</td>
                        <td>@transaction.Description</td>
                        <td>@($"{preferredCurrency} {transaction.Amount}")</td>
                        <td>@transaction.Date.ToString("yyyy-MM-dd")</td>
                        <td>
                            <div class="chip @(transaction.Type == "Income" ? "income" : transaction.Type == "Expense" ? "expense" : "debt")">
                                <span class="icon"></span>
                                @transaction.Type
                            </div>
                        </td>

                        <td>@transaction.Tag</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Modal for Adding Transaction -->
    @if (showModal)
    {
        <div class="modal fade show d-block" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Add Transaction</h5>
                        <button type="button" class="btn-close" @onclick="CloseModal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label>Title</label>
                            <input type="text" class="form-control" @bind="newTransaction.Description" />
                            @if (!string.IsNullOrEmpty(descriptionErrorMessage))
                            {
                                <div class="text-danger">@descriptionErrorMessage</div>
                            }
                        
                        </div>
                        <div class="mb-3">
                            <label>Amount</label>
                            <input type="number" class="form-control" @bind="newTransaction.Amount" />
                            @if (!string.IsNullOrEmpty(amountErrorMessage))
                            {
                                <div class="text-danger">@amountErrorMessage</div>
                            }
                        </div>
                        <div class="mb-3">
                            <label>Transaction Type</label>
                            <select class="form-control" @bind="newTransaction.Type">
                                <option value=""></option>
                                <option value="Income">Income</option>
                                <option value="Expense">Expense</option>
                                <option value="Debt">Debt</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label>Tag</label>
                            <select class="form-control" @bind="newTransaction.Tag">
                                <option value=""></option>
                                @foreach (var tag in tags)
                                {
                                    <option value="@tag.Name">@tag.Name</option>
                                }
                            </select>
                        </div>
                        <div class="mb-3">
                            <label>Date</label>
                            <input type="date" class="form-control" @bind="newTransaction.Date" />
                        </div>
                        @if (newTransaction.Type == "Debt")
                        {
                            <!-- Additional fields for Debt -->
                            <div class="mb-4">
                                <label>Source</label>
                                <input type="text" class="form-control" @bind="newTransaction.Source" />
                            </div>
                            <div class="mb-3">
                                <label>Due Date</label>
                                <input type="date" class="form-control" @bind="newTransaction.DueDate" />
                            </div>
                            <div class="mb-3">
                                <label>Status</label>
                                <select class="form-control" @bind="newTransaction.Status">
                                    <option value=""></option>
                                    <option value="Pending">Pending</option>
                                    <option value="Cleared">Cleared</option>
                                </select>
                            </div>
                        }
                        <div class="mb-3">
                            <label>Note (Optional)</label>
                            <textarea class="form-control" @bind="newTransaction.Note"></textarea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                        <button type="button" class="btn btn-primary" @onclick="AddTransaction">Add</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
}

@code {
    private string preferredCurrency;
    private string searchTerm;
    private string activeFilter = "All";
    private Transaction newTransaction = new Transaction();
    private bool showModal = false;
    private DateTime? fromDate;
    private DateTime? toDate;
    private List<Transaction> transactions = new List<Transaction>();
    private List<Transaction> filteredTransactions = new List<Transaction>();
    private string currentSortOrder = "Ascending";
    private string descriptionErrorMessage;
    private string amountErrorMessage;
    private List<Tag> tags = new List<Tag>();

   
    protected override async Task OnInitializedAsync()
    {
        transactions = await transactionService.GetTransactionsAsync();
        ApplyFilters();
        tags = await tagService.GetTagsAsync();

        var authenticatedUser = authStateService.GetAuthenticatedUser();
        if (authenticatedUser != null)
        {
            preferredCurrency = authenticatedUser.PreferredCurrency;
        }
    }

    private void ApplyFilters()
    {
        filteredTransactions = transactions
     .Where(t =>
         // Apply active filter
         (activeFilter == "All" || t.Type.Equals(activeFilter, StringComparison.OrdinalIgnoreCase)) &&

         // Apply search filter
         (string.IsNullOrWhiteSpace(searchTerm) ||
          t.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
          t.Tag.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&

         // Apply date range filter
         (!fromDate.HasValue || t.Date >= fromDate) &&
         (!toDate.HasValue || t.Date <= toDate))
     .OrderBy(t => currentSortOrder == "Ascending" ? t.Date.Ticks : -t.Date.Ticks) 
     .ToList();

    }

    private void OnTransactionTypeChange(ChangeEventArgs e)
    {
        newTransaction.Type = e.Value.ToString();
    }

    private void FilterIncome() => SetActiveFilter("Income");
    private void FilterExpense() => SetActiveFilter("Expense");
    private void FilterDebt() => SetActiveFilter("Debt");
    private void ClearFilters() => SetActiveFilter("All");

    private void SetActiveFilter(string filterType)
    {
        activeFilter = filterType;
        ApplyFilters();
    }

    private void FilterTransaction() => ApplyFilters();

    private void ToggleSortOrder()
    {
        currentSortOrder = currentSortOrder == "Ascending" ? "Descending" : "Ascending";
        ApplyFilters();
    }

    private void OpenModal()
    {
        newTransaction = new Transaction { Date = DateTime.Now };
        showModal = true;
    }

    private void CloseModal() => showModal = false;

    private async Task AddTransaction()
    {
        try
        {
            // Clear previous errors
            descriptionErrorMessage = string.Empty;
            amountErrorMessage = string.Empty;

            // Check if the description is empty
            if (string.IsNullOrWhiteSpace(newTransaction.Description))
            {
                descriptionErrorMessage = "Description is required.";
            }

            // Check if the amount is valid
            if (newTransaction.Amount <= 0)
            {
                amountErrorMessage = "Amount must be greater than zero.";
            }

            // Check sufficient balance for Expense type
            if (newTransaction.Type == "Expense")
            {
                var totalIncome = transactions.Where(t => t.Type == "Income").Sum(t => t.Amount);
                var totalExpenses = transactions.Where(t => t.Type == "Expense").Sum(t => t.Amount);
                var totalDebt = transactions.Where(t => t.Type == "Debt").Sum(t => t.Amount);
                var availableBalance = totalIncome + totalDebt - totalExpenses;

                if (newTransaction.Amount > availableBalance)
                {
                    amountErrorMessage = "Insufficient balance.";
                }
            }

            // If there are any errors, stop execution
            if (!string.IsNullOrWhiteSpace(descriptionErrorMessage) ||
                !string.IsNullOrWhiteSpace(amountErrorMessage))
            {
                return;
            }
            else
            {
                
            // Add the transaction and refresh the list
            await transactionService.AddTransactionAsync(newTransaction);
            transactions = await transactionService.GetTransactionsAsync();
            ApplyFilters();

            CloseModal();
            }

        }
        catch (Exception ex)
        {
            // Handle unexpected errors
            amountErrorMessage = $"An error occurred: {ex.Message}";
        }
    }

}

