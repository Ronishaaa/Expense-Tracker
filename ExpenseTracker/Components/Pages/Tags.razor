@page "/tags"
@using ExpenseTracker.Models
@using ExpenseTracker.Services
@inject AuthenticationStateService authStateService
@inject NavigationManager navigationManager
@inject ITagService tagService

@if (authStateService.IsAuthenticated())
{
    <div class="p-4">
        <div class="d-flex justify-content-between">
            <h2>Tags</h2>
            <MudButton Variant="Variant.Filled"
                        StartIcon="@Icons.Material.Filled.Add"
                        IconColor="Color.Secondary"
                        Size="Size.Large"
                        @onclick="@(() => navigationManager.NavigateTo("/add-tag"))"
                        Style="background-color: #001B2E; color: white; border-radius:10px;">
                Add Tag
            </MudButton>
      
        </div>

        <!-- Tags List -->
        <div class="tag-list my-4">
            <table class="table">
                <thead>
                    <tr>
                        <th>SNO</th>
                        <th>Tag Name</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (!tags.Any())
                    {
                        <tr>
                            <td colspan="3" class="no-tags">No tags</td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var (tag, index) in tags.Select((t, i) => (t, i + 1)))
                        {
                            <tr>
                                <td>@index</td>
                                <td>@tag.Name</td>
                                <td>
                                    <MudIconButton OnClick="() => DeleteTag(tag.Id)" Icon="@Icons.Material.Filled.Delete" aria-label="delete" />
                                </td>
                            </tr>
                        }
                    }
                </tbody>

            </table>
        </div>

    </div>

}

@code {
    private List<Tag> tags = new List<Tag>();

    protected override async Task OnInitializedAsync()
    {
        tags = await tagService.GetTagsAsync();
    }


    private async Task DeleteTag(int tagId)
    {
        await tagService.DeleteTagAsync(tagId);
        tags = await tagService.GetTagsAsync();
    }
}
