@page "/debts"
@using ExpenseTracker.Models
@using ExpenseTracker.Services
@inject AuthenticationStateService authStateService
@inject NavigationManager navigationManager
@inject ITransactionService transactionService


@if (authStateService.IsAuthenticated())
{

    <div class="d-flex justify-content-between">
        <h2>Debt</h2>
    </div>

    <!-- Filters and Search Bar -->
    <div class="my-3">

        <div class="d-flex gap-2 mt-1">

            <input type="text" class="form-control" placeholder="Search by Title or Tag" @bind="searchTerm" />

            <div class="d-flex gap-2 align-items-center">
                <div class="d-flex gap-2">
                    <label>From:</label>
                    <input type="date" class="form-control" @bind="fromDate"  />
                </div>
                <div class="d-flex gap-2 align-items-center">
                    <label>To:</label>
                    <input type="date" class="form-control" @bind="toDate" />
                </div>
            </div>
            <button class="btn btn-primary" @onclick="FilterTransaction">Search</button>
        </div>
    </div>

    <!-- Debt List -->
    <div class="transaction-list">
        <table class="table">
            <thead>
                <tr>
                    <th>SNO</th>
                    <th>Source</th>
                    <th>Amount</th>
                    <th>Due Date
                        <button class="btn btn-secondary" @onclick="ToggleSortOrder">
                            Sort by Date (@currentSortOrder)
                        </button>

                    </th>
                    <th>Status</th>
                    <th/>
                </tr>
            </thead>
            <tbody>
                @foreach (var (transaction,index) in filteredTransactions.Select((t,i)=>(t,i+1)))
                {
                    <tr>
                        <td>@index</td>
                        <td>@transaction.Source</td>
                        <td>@transaction.Amount.ToString("C")</td>
                        <td>@transaction.DueDate?.ToString("yyyy-MM-dd")</td>
                        <td class="@(transaction.Status == "Cleared" ? "text-success" : "text-danger" )">
                            @(transaction.Status ?? "Unknown")
                        </td>
                        <td class="@(transaction.Status == "Cleared" ? "text-success" : "text-danger" )">
                            @transaction.Type
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

}
@code {
    private string searchTerm;
    private DateTime? fromDate;
    private DateTime? toDate;
    private List<Transaction> transactions = new List<Transaction>();
    private List<Transaction> filteredTransactions = new List<Transaction>();
    private string currentSortOrder = "Ascending";

    protected override async Task OnInitializedAsync()
    {
        transactions = await transactionService.GetTransactionsAsync();
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        filteredTransactions = transactions
     .Where(t =>
         // Apply active filter
         (t.Type == "Debt" ) &&

         // Apply search filter
         (string.IsNullOrWhiteSpace(searchTerm) ||
          t.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
          t.Tag.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&

         // Apply date range filter
         (!fromDate.HasValue || t.Date >= fromDate) &&
         (!toDate.HasValue || t.Date <= toDate))
     .OrderBy(t => currentSortOrder == "Ascending" ? t.Date.Ticks : -t.Date.Ticks) 
     .ToList();

    }
    

    private void SetActiveFilter(string filterType)
    {
        ApplyFilters();
    }

    private void FilterTransaction() => ApplyFilters();

    private void ToggleSortOrder()
    {
        currentSortOrder = currentSortOrder == "Ascending" ? "Descending" : "Ascending";
        ApplyFilters();
    }

 


   
}

